@use "sass:math";
@use "src/styles/constants" as c;
@use "src/styles/mixins" as m;

$SPACE: 12px;
$CLOSE_BUTTON_SIZE: 16px;
$CLOSE_BUTTON_LINE_WIDTH: calc(1px * math.sqrt(2));
$CLOSE_BUTTON_LINE_HEIGHT: calc(10px * math.sqrt(2));

.wrapper {
	@include m.flex(flex-start, flex-start, column);
	width: 100%;
	min-width: 320px;
	max-width: 800px;
	transition: all 0.3s;

	.toast {
		@include m.flex(flex-start);
		width: 100%;
		padding: 20px 20px 20px 24px;
		pointer-events: none;
		background-color: var(--c-background-normal-normal);
		border: 1px solid var(--c-line-normal-normal);
		border-radius: 2px;
		box-shadow: var(--c-shadow-emphasize);
		opacity: 0;
		transition: all 0.2s;
		transform: scale(0.8);

		.icon {
			margin-right: 8px;
		}

		.text {
			@include m.fontBody1Normal("regular");
			@include m.makeEllipsis(2);
			flex: 1;
			padding-right: 20px;
		}

		.closeButton {
			position: relative;
			width: $CLOSE_BUTTON_SIZE;
			height: $CLOSE_BUTTON_SIZE;
			margin-left: auto;
			pointer-events: all;

			&::before {
				@include m.absolute(50% 50% auto auto);
				width: $CLOSE_BUTTON_LINE_WIDTH;
				height: $CLOSE_BUTTON_LINE_HEIGHT;
				cursor: pointer;
				content: "";
				background-color: var(--c-label-normal);
				border-radius: 4px;
				transform: translate(-50%, -50%) rotate(45deg);
			}

			&::after {
				@include m.absolute(50% 50% auto auto);
				width: $CLOSE_BUTTON_LINE_WIDTH;
				height: $CLOSE_BUTTON_LINE_HEIGHT;
				cursor: pointer;
				content: "";
				background-color: var(--c-label-normal);
				border-radius: 4px;
				transform: translate(-50%, -50%) rotate(-45deg);
			}
		}

		& + .toast {
			margin-top: $SPACE;
		}

		&:is(.neutral, .informative) {
			.icon path {
				stroke: var(--c-label-normal);
			}

			.text {
				color: var(--c-label-normal);
			}
		}

		&.negative {
			.icon path {
				stroke: var(--c-status-negative);
			}

			.text {
				color: var(--c-status-negative);
			}
		}

		&.positive {
			.icon path {
				stroke: var(--c-status-positive);
			}

			.text {
				color: var(--c-status-positive);
			}
		}

		&:last-child:where(.enterDone, .exit) {
			opacity: 1;
			transform: scale(1);
		}

		&:nth-last-child(2):where(.enterDone, .exit) {
			opacity: 0.8;
			transform: scale(1);
		}

		&:nth-last-child(3):where(.enterDone, .exit) {
			opacity: 0.4;
			transform: scale(1);
		}

		&:is(.enter, .exitActive) {
			opacity: 0;
			transform: scale(0.8);
		}
	}
}
