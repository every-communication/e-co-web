/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FriendsImport } from './routes/friends'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as AuthRegisterCompleteImport } from './routes/auth/register-complete'
import { Route as AuthOauthRegisterImport } from './routes/auth/oauth-register'
import { Route as AuthOauthCallbackImport } from './routes/auth/oauth-callback'

// Create Virtual Routes

const MyPageLazyImport = createFileRoute('/my-page')()
const IndexLazyImport = createFileRoute('/')()
const AuthIndexLazyImport = createFileRoute('/auth/')()
const VideoTelegraphyCodeLazyImport = createFileRoute(
  '/video-telegraphy/$code',
)()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()

// Create/Update Routes

const MyPageLazyRoute = MyPageLazyImport.update({
  path: '/my-page',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/my-page.lazy').then((d) => d.Route))

const FriendsRoute = FriendsImport.update({
  path: '/friends',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const VideoTelegraphyCodeLazyRoute = VideoTelegraphyCodeLazyImport.update({
  path: '/video-telegraphy/$code',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/video-telegraphy.$code.lazy').then((d) => d.Route),
)

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthRegisterCompleteRoute = AuthRegisterCompleteImport.update({
  path: '/register-complete',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthOauthRegisterRoute = AuthOauthRegisterImport.update({
  path: '/oauth-register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthOauthCallbackRoute = AuthOauthCallbackImport.update({
  path: '/oauth-callback',
  getParentRoute: () => AuthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/friends': {
      id: '/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof FriendsImport
      parentRoute: typeof rootRoute
    }
    '/my-page': {
      id: '/my-page'
      path: '/my-page'
      fullPath: '/my-page'
      preLoaderRoute: typeof MyPageLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/oauth-callback': {
      id: '/auth/oauth-callback'
      path: '/oauth-callback'
      fullPath: '/auth/oauth-callback'
      preLoaderRoute: typeof AuthOauthCallbackImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/oauth-register': {
      id: '/auth/oauth-register'
      path: '/oauth-register'
      fullPath: '/auth/oauth-register'
      preLoaderRoute: typeof AuthOauthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/register-complete': {
      id: '/auth/register-complete'
      path: '/register-complete'
      fullPath: '/auth/register-complete'
      preLoaderRoute: typeof AuthRegisterCompleteImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/video-telegraphy/$code': {
      id: '/video-telegraphy/$code'
      path: '/video-telegraphy/$code'
      fullPath: '/video-telegraphy/$code'
      preLoaderRoute: typeof VideoTelegraphyCodeLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AuthRouteRoute: AuthRouteRoute.addChildren({
    AuthOauthCallbackRoute,
    AuthOauthRegisterRoute,
    AuthRegisterCompleteRoute,
    AuthRegisterLazyRoute,
    AuthIndexLazyRoute,
  }),
  FriendsRoute,
  MyPageLazyRoute,
  VideoTelegraphyCodeLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/friends",
        "/my-page",
        "/video-telegraphy/$code"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/oauth-callback",
        "/auth/oauth-register",
        "/auth/register-complete",
        "/auth/register",
        "/auth/"
      ]
    },
    "/friends": {
      "filePath": "friends.tsx"
    },
    "/my-page": {
      "filePath": "my-page.lazy.tsx"
    },
    "/auth/oauth-callback": {
      "filePath": "auth/oauth-callback.tsx",
      "parent": "/auth"
    },
    "/auth/oauth-register": {
      "filePath": "auth/oauth-register.tsx",
      "parent": "/auth"
    },
    "/auth/register-complete": {
      "filePath": "auth/register-complete.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx",
      "parent": "/auth"
    },
    "/video-telegraphy/$code": {
      "filePath": "video-telegraphy.$code.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.lazy.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
